//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "department"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    #[serde(skip_deserializing)]
    pub department_id: Uuid,
    pub name: String,
    pub founding_date: DateTime,
    pub dean: String,
    pub create_at: DateTime,
    pub update_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    DepartmentId,
    Name,
    FoundingDate,
    Dean,
    CreateAt,
    UpdateAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    DepartmentId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    MajorDepartmentUser,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::DepartmentId => ColumnType::Uuid.def(),
            Self::Name => ColumnType::String(StringLen::None).def(),
            Self::FoundingDate => ColumnType::DateTime.def(),
            Self::Dean => ColumnType::String(StringLen::None).def(),
            Self::CreateAt => ColumnType::DateTime.def(),
            Self::UpdateAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::MajorDepartmentUser => {
                Entity::has_many(super::major_department_user::Entity).into()
            }
        }
    }
}

impl Related<super::major_department_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MajorDepartmentUser.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
