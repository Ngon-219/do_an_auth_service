//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "wallet"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    #[serde(skip_deserializing)]
    pub wallet_id: Uuid,
    pub user_id: Uuid,
    pub address: String,
    pub private_key: String,
    pub chain_type: String,
    pub public_key: String,
    pub status: String,
    pub network_id: String,
    pub last_used_at: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    WalletId,
    UserId,
    Address,
    PrivateKey,
    ChainType,
    PublicKey,
    Status,
    NetworkId,
    LastUsedAt,
    CreatedAt,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    WalletId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    User,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::WalletId => ColumnType::Uuid.def(),
            Self::UserId => ColumnType::Uuid.def().unique(),
            Self::Address => ColumnType::String(StringLen::None).def(),
            Self::PrivateKey => ColumnType::String(StringLen::None).def(),
            Self::ChainType => ColumnType::String(StringLen::None).def(),
            Self::PublicKey => ColumnType::String(StringLen::None).def(),
            Self::Status => ColumnType::String(StringLen::None).def(),
            Self::NetworkId => ColumnType::String(StringLen::None).def(),
            Self::LastUsedAt => ColumnType::DateTime.def().null(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::User => Entity::belongs_to(super::user::Entity)
                .from(Column::UserId)
                .to(super::user::Column::UserId)
                .into(),
        }
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
