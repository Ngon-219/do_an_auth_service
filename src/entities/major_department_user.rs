//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "major_department_user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    #[serde(skip_deserializing)]
    pub major_id: Uuid,
    #[serde(skip_deserializing)]
    pub department_id: Uuid,
    #[serde(skip_deserializing)]
    pub user_id: Uuid,
    pub create_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    MajorId,
    DepartmentId,
    UserId,
    CreateAt,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    MajorId,
    DepartmentId,
    UserId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (Uuid, Uuid, Uuid);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Department,
    Major,
    User,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::MajorId => ColumnType::Uuid.def(),
            Self::DepartmentId => ColumnType::Uuid.def(),
            Self::UserId => ColumnType::Uuid.def(),
            Self::CreateAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Department => Entity::belongs_to(super::department::Entity)
                .from(Column::DepartmentId)
                .to(super::department::Column::DepartmentId)
                .into(),
            Self::Major => Entity::belongs_to(super::major::Entity)
                .from(Column::MajorId)
                .to(super::major::Column::MajorId)
                .into(),
            Self::User => Entity::belongs_to(super::user::Entity)
                .from(Column::UserId)
                .to(super::user::Column::UserId)
                .into(),
        }
    }
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl Related<super::major::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Major.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
