//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "major")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub major_id: Uuid,
    pub name: String,
    pub founding_date: DateTime,
    pub create_at: DateTime,
    pub update_at: DateTime,
    pub department_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::department::Entity",
        from = "Column::DepartmentId",
        to = "super::department::Column::DepartmentId",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Department,
    #[sea_orm(has_many = "super::user_major::Entity")]
    UserMajor,
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl Related<super::user_major::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserMajor.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_major::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_major::Relation::Major.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
