//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use super::sea_orm_active_enums::RoleEnum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    pub first_name: String,
    pub last_name: String,
    pub address: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub is_priority: bool,
    pub cccd: String,
    pub phone_number: String,
    pub is_first_login: bool,
    pub create_at: DateTime,
    pub update_at: DateTime,
    pub role: RoleEnum,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_major::Entity")]
    UserMajor,
    #[sea_orm(has_one = "super::wallet::Entity")]
    Wallet,
}

impl Related<super::user_major::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserMajor.def()
    }
}

impl Related<super::wallet::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallet.def()
    }
}

impl Related<super::major::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_major::Relation::Major.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_major::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
