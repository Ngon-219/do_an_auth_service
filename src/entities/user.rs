//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use super::sea_orm_active_enums::RoleEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    #[serde(skip_deserializing)]
    pub user_id: Uuid,
    pub first_name: String,
    pub last_name: String,
    pub address: String,
    pub email: String,
    pub password: String,
    pub is_priority: bool,
    pub cccd: String,
    pub phone_number: String,
    pub is_first_login: bool,
    pub create_at: DateTime,
    pub update_at: DateTime,
    pub role: RoleEnum,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    UserId,
    FirstName,
    LastName,
    Address,
    Email,
    Password,
    IsPriority,
    Cccd,
    PhoneNumber,
    IsFirstLogin,
    CreateAt,
    UpdateAt,
    Role,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    UserId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    MajorDepartmentUser,
    Wallet,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::UserId => ColumnType::Uuid.def(),
            Self::FirstName => ColumnType::String(StringLen::None).def(),
            Self::LastName => ColumnType::String(StringLen::None).def(),
            Self::Address => ColumnType::String(StringLen::None).def(),
            Self::Email => ColumnType::String(StringLen::None).def().unique(),
            Self::Password => ColumnType::String(StringLen::None).def(),
            Self::IsPriority => ColumnType::Boolean.def(),
            Self::Cccd => ColumnType::String(StringLen::None).def(),
            Self::PhoneNumber => ColumnType::String(StringLen::None).def(),
            Self::IsFirstLogin => ColumnType::Boolean.def(),
            Self::CreateAt => ColumnType::DateTime.def(),
            Self::UpdateAt => ColumnType::DateTime.def(),
            Self::Role => RoleEnum::db_type().get_column_type().to_owned().def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::MajorDepartmentUser => {
                Entity::has_many(super::major_department_user::Entity).into()
            }
            Self::Wallet => Entity::has_one(super::wallet::Entity).into(),
        }
    }
}

impl Related<super::major_department_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MajorDepartmentUser.def()
    }
}

impl Related<super::wallet::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallet.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
